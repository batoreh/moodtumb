{"version":3,"sources":["components/Gallerie.js","App.js","serviceWorker.js","index.js"],"names":["Gallerie","props","apiKey","config","tumblr","key","urls","profiles","map","site","getPhotos","post","photos","photo","original_size","url","useState","pics","setPics","columns","setColumns","useEffect","requests","fetch","then","res","json","Promise","all","data","reduce","acc","profile","console","log","response","posts","flatten","width","window","innerWidth","className","breakpointCols","columnClassName","pic","data-caman","src","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"2SA4DeA,EA/CE,SAACC,GACd,IAAMC,EAASC,EAAOC,OAAOC,IAEvBC,EADQH,EAAOC,OAAOG,SACTC,KAAI,SAAAC,GAAI,+CAAsCA,EAAtC,2CAA6EP,EAA7E,iBACrBQ,EAAY,SAAAC,GACd,OAAOA,EAAKC,QAAUD,EAAKC,OAAOJ,KAAI,SAAAK,GAAK,OAAIA,EAAMC,cAAcC,QAL/C,EAOEC,mBAAS,IAPX,mBAOhBC,EAPgB,KAOVC,EAPU,OAQQF,mBAAS,GARjB,mBAQhBG,EARgB,KAQPC,EARO,KA6BxB,OAnBAC,qBAAU,WACN,IAAMC,EAAWhB,EAAKE,KAAI,SAAAO,GAAG,OAAIQ,MAAMR,GAAKS,MAAK,SAAAC,GAAG,OAAIA,EAAIC,aAC5DC,QAAQC,IAAIN,GACPE,MAAK,SAAAK,GACF,IAAMZ,EAAOY,EAAKC,QAAO,SAACC,EAAKC,GAC3BC,QAAQC,IAAIF,GACZ,IAAMpB,EAASoB,EAAQG,SAASC,MAAM5B,IAAIE,GAC1C,MAAM,GAAN,mBAAWqB,GAAX,YAAmBM,IAAQzB,OAC5B,IAEHM,EAAQD,MAGhB,IAAMqB,EAAQC,OAAOC,WAEjBF,EAAQ,KAAOA,EAAQ,KAAKlB,EAAW,GACvCkB,EAAQ,KAAKlB,EAAW,KAC7B,IAGC,yBAAKqB,UAAU,YACX,kBAAC,IAAD,CACIC,eAAgBvB,EAChBsB,UAAU,kBACVE,gBAAgB,0BACf1B,EAAKT,KAAI,SAAAoC,GAAG,OACT,yBACIH,UAAU,MACVI,aAAW,wDACXxC,IAAKuC,EACLE,IAAKF,U,YCpCdG,MAXf,WACE,OACE,yBAAKN,UAAU,OACb,4BAAQA,UAAU,cAAlB,wBAGA,kBAAC,EAAD,QCAcO,QACW,cAA7BT,OAAOU,SAASC,UAEe,UAA7BX,OAAOU,SAASC,UAEhBX,OAAOU,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBnC,MAAK,SAAAoC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL9B,QAAQ8B,MAAMA,EAAMC,a","file":"static/js/main.784d6689.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport flatten from 'lodash.flatten';\nimport 'masonry-layout';\nimport Masonry from 'react-masonry-css';\n \nimport config from '../config.json';\n\nconst COLUMNS = {\n    0: 1,\n    680: 2,\n    960: 3\n};\n\nconst Gallerie = (props) => {\n    const apiKey = config.tumblr.key;\n    const sites = config.tumblr.profiles;\n    const urls = sites.map(site => `https://api.tumblr.com/v2/blog/${site}.tumblr.com/posts/photo?api_key=${apiKey}&limit=100`);\n    const getPhotos = post => {\n        return post.photos && post.photos.map(photo => photo.original_size.url);\n    };\n    const [ pics, setPics ] = useState([]);\n    const [ columns, setColumns ] = useState(3);\n\n    useEffect(() => {\n        const requests = urls.map(url => fetch(url).then(res => res.json()));\n        Promise.all(requests)\n            .then(data => {\n                const pics = data.reduce((acc, profile) => {\n                    console.log(profile)\n                    const photos = profile.response.posts.map(getPhotos);\n                    return [...acc, ...flatten(photos)];\n                }, []);\n\n                setPics(pics);\n            });\n\n        const width = window.innerWidth;\n\n        if (width < 960 && width > 680) setColumns(2);\n        if (width < 680) setColumns(1);\n    }, []);\n\n    return(\n        <div className=\"gallerie\">\n            <Masonry\n                breakpointCols={columns}\n                className=\"my-masonry-grid\"\n                columnClassName=\"my-masonry-grid_column\">\n                {pics.map(pic => \n                    <img\n                        className='pic'\n                        data-caman='brightness(10) contrast(30) sepia(60) saturation(-30)'\n                        key={pic}\n                        src={pic} />\n                )}\n            </Masonry>\n        </div>\n    )\n}\n\nexport default Gallerie;","import React from 'react';\nimport './App.css';\nimport Gallerie from './components/Gallerie';\nimport 'flexmasonry/dist/flexmasonry.css';\nimport 'flexmasonry/dist/flexmasonry.js';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        awksacred`s moodtumb\n      </header>\n      <Gallerie />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}